#!/bin/bash

# Script Kh·ªüi t·∫°o H·ªá th·ªëng Auto Login
# Script n√†y thi·∫øt l·∫≠p m√¥i tr∆∞·ªùng production ban ƒë·∫ßu

set -e

# M√†u s·∫Øc cho output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_status() {
    echo -e "${BLUE}[TH√îNG B√ÅO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[TH√ÄNH C√îNG]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[C·∫¢NH B√ÅO]${NC} $1"
}

print_error() {
    echo -e "${RED}[L·ªñI]${NC} $1"
}

# Ki·ªÉm tra quy·ªÅn root
check_root() {
    if [ "$EUID" -eq 0 ]; then
        print_warning "ƒêang ch·∫°y v·ªõi quy·ªÅn root. Khuy·∫øn ngh·ªã ch·∫°y v·ªõi user th∆∞·ªùng."
        read -p "B·∫°n c√≥ mu·ªën ti·∫øp t·ª•c? (y/N): " -n 1 -r
        echo
        if [[ ! $REPLY =~ ^[Yy]$ ]]; then
            exit 1
        fi
    fi
}

# C√†i ƒë·∫∑t Docker
install_docker() {
    print_status "C√†i ƒë·∫∑t Docker..."

    if command -v docker >/dev/null 2>&1; then
        print_success "Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        return 0
    fi

    # Detect OS
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS=$NAME
        VER=$VERSION_ID
    else
        print_error "Kh√¥ng th·ªÉ x√°c ƒë·ªãnh h·ªá ƒëi·ªÅu h√†nh"
        exit 1
    fi

    case $OS in
        "Ubuntu"|"Debian GNU/Linux")
            print_status "C√†i ƒë·∫∑t Docker tr√™n Ubuntu/Debian..."
            sudo apt-get update
            sudo apt-get install -y apt-transport-https ca-certificates curl gnupg lsb-release
            curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            sudo apt-get update
            sudo apt-get install -y docker-ce docker-ce-cli containerd.io
            ;;
        "CentOS Linux"|"Red Hat Enterprise Linux")
            print_status "C√†i ƒë·∫∑t Docker tr√™n CentOS/RHEL..."
            sudo yum install -y yum-utils
            sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            sudo yum install -y docker-ce docker-ce-cli containerd.io
            sudo systemctl start docker
            sudo systemctl enable docker
            ;;
        *)
            print_error "H·ªá ƒëi·ªÅu h√†nh kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£: $OS"
            exit 1
            ;;
    esac

    # Th√™m user v√†o docker group
    sudo usermod -aG docker $USER
    print_success "Docker ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng"
    print_warning "Vui l√≤ng ƒëƒÉng xu·∫•t v√† ƒëƒÉng nh·∫≠p l·∫°i ƒë·ªÉ √°p d·ª•ng quy·ªÅn docker"
}

# C√†i ƒë·∫∑t Docker Compose
install_docker_compose() {
    print_status "C√†i ƒë·∫∑t Docker Compose..."

    if command -v docker-compose >/dev/null 2>&1; then
        print_success "Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
        return 0
    fi

    # C√†i ƒë·∫∑t Docker Compose
    sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
    sudo chmod +x /usr/local/bin/docker-compose

    print_success "Docker Compose ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t th√†nh c√¥ng"
}

# C√†i ƒë·∫∑t c√°c c√¥ng c·ª• c·∫ßn thi·∫øt
install_tools() {
    print_status "C√†i ƒë·∫∑t c√°c c√¥ng c·ª• c·∫ßn thi·∫øt..."

    local tools=("curl" "wget" "git" "htop" "unzip")
    local missing_tools=()

    for tool in "${tools[@]}"; do
        if ! command -v $tool >/dev/null 2>&1; then
            missing_tools+=($tool)
        fi
    done

    if [ ${#missing_tools[@]} -ne 0 ]; then
        if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update
            sudo apt-get install -y "${missing_tools[@]}"
        elif command -v yum >/dev/null 2>&1; then
            sudo yum install -y "${missing_tools[@]}"
        fi
    fi

    print_success "C√°c c√¥ng c·ª• ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t"
}

# T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c
create_directories() {
    print_status "T·∫°o c·∫•u tr√∫c th∆∞ m·ª•c..."

    local directories=(
        "logs"
        "backups"
        "backups/database"
        "backups/files"
        "ssl"
        "uploads"
        "monitoring"
        "monitoring/grafana"
        "monitoring/grafana/dashboards"
        "monitoring/grafana/datasources"
        "deployments"
        "config"
        "temp"
    )

    for dir in "${directories[@]}"; do
        mkdir -p "$dir"
    done

    print_success "C·∫•u tr√∫c th∆∞ m·ª•c ƒë√£ ƒë∆∞·ª£c t·∫°o"
}

# C·∫•u h√¨nh firewall
configure_firewall() {
    print_status "C·∫•u h√¨nh firewall..."

    if command -v ufw >/dev/null 2>&1; then
        # Ubuntu/Debian
        sudo ufw --force enable
        sudo ufw allow ssh
        sudo ufw allow 80/tcp
        sudo ufw allow 443/tcp
        sudo ufw allow 3000/tcp
        sudo ufw allow 3001/tcp
        sudo ufw allow 3002/tcp
        print_success "UFW firewall ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"
    elif command -v firewall-cmd >/dev/null 2>&1; then
        # CentOS/RHEL
        sudo firewall-cmd --permanent --add-service=ssh
        sudo firewall-cmd --permanent --add-port=80/tcp
        sudo firewall-cmd --permanent --add-port=443/tcp
        sudo firewall-cmd --permanent --add-port=3000/tcp
        sudo firewall-cmd --permanent --add-port=3001/tcp
        sudo firewall-cmd --permanent --add-port=3002/tcp
        sudo firewall-cmd --reload
        print_success "Firewalld ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"
    else
        print_warning "Kh√¥ng t√¨m th·∫•y firewall, b·ªè qua c·∫•u h√¨nh"
    fi
}

# T·∫°o file c·∫•u h√¨nh m√¥i tr∆∞·ªùng
setup_environment() {
    print_status "Thi·∫øt l·∫≠p file c·∫•u h√¨nh m√¥i tr∆∞·ªùng..."

    if [ ! -f ".env" ]; then
        if [ -f "env.production" ]; then
            cp env.production .env
            print_success "ƒê√£ copy env.production th√†nh .env"
        else
            print_warning "Kh√¥ng t√¨m th·∫•y file env.production"
        fi
    else
        print_warning "File .env ƒë√£ t·ªìn t·∫°i"
    fi
}

# T·∫°o script kh·ªüi ƒë·ªông t·ª± ƒë·ªông
setup_autostart() {
    print_status "Thi·∫øt l·∫≠p kh·ªüi ƒë·ªông t·ª± ƒë·ªông..."

    # T·∫°o systemd service
    cat > auto-login.service << EOF
[Unit]
Description=Auto Login System
Requires=docker.service
After=docker.service

[Service]
Type=oneshot
RemainAfterExit=yes
WorkingDirectory=$(pwd)
ExecStart=/usr/local/bin/docker-compose up -d
ExecStop=/usr/local/bin/docker-compose down
TimeoutStartSec=0

[Install]
WantedBy=multi-user.target
EOF

    # Copy service file
    sudo cp auto-login.service /etc/systemd/system/
    sudo systemctl daemon-reload
    sudo systemctl enable auto-login.service

    # Cleanup
    rm auto-login.service

    print_success "Kh·ªüi ƒë·ªông t·ª± ƒë·ªông ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"
}

# T·∫°o cron jobs
setup_cron_jobs() {
    print_status "Thi·∫øt l·∫≠p cron jobs..."

    # Backup h√†ng ng√†y l√∫c 2:00 s√°ng
    (crontab -l 2>/dev/null; echo "0 2 * * * cd $(pwd) && ./scripts/backup.sh backup > /dev/null 2>&1") | crontab -

    # Monitoring m·ªói 5 ph√∫t
    (crontab -l 2>/dev/null; echo "*/5 * * * * cd $(pwd) && ./scripts/monitor.sh > /dev/null 2>&1") | crontab -

    # Cleanup logs h√†ng tu·∫ßn
    (crontab -l 2>/dev/null; echo "0 3 * * 0 cd $(pwd) && find logs -name '*.log' -mtime +7 -delete > /dev/null 2>&1") | crontab -

    print_success "Cron jobs ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh"
}

# Ki·ªÉm tra h·ªá th·ªëng
system_check() {
    print_status "Ki·ªÉm tra h·ªá th·ªëng..."

    local checks=0
    local total_checks=6

    # Ki·ªÉm tra Docker
    if command -v docker >/dev/null 2>&1; then
        print_success "‚úì Docker"
        ((checks++))
    else
        print_error "‚úó Docker"
    fi

    # Ki·ªÉm tra Docker Compose
    if command -v docker-compose >/dev/null 2>&1; then
        print_success "‚úì Docker Compose"
        ((checks++))
    else
        print_error "‚úó Docker Compose"
    fi

    # Ki·ªÉm tra Git
    if command -v git >/dev/null 2>&1; then
        print_success "‚úì Git"
        ((checks++))
    else
        print_error "‚úó Git"
    fi

    # Ki·ªÉm tra th∆∞ m·ª•c
    if [ -d "logs" ] && [ -d "backups" ] && [ -d "ssl" ]; then
        print_success "‚úì Th∆∞ m·ª•c"
        ((checks++))
    else
        print_error "‚úó Th∆∞ m·ª•c"
    fi

    # Ki·ªÉm tra file .env
    if [ -f ".env" ]; then
        print_success "‚úì File .env"
        ((checks++))
    else
        print_error "‚úó File .env"
    fi

    # Ki·ªÉm tra quy·ªÅn script
    if [ -x "scripts/deploy-production.sh" ]; then
        print_success "‚úì Script permissions"
        ((checks++))
    else
        print_error "‚úó Script permissions"
    fi

    echo
    print_status "K·∫øt qu·∫£ ki·ªÉm tra: $checks/$total_checks"

    if [ $checks -eq $total_checks ]; then
        print_success "H·ªá th·ªëng ƒë√£ s·∫µn s√†ng ƒë·ªÉ deploy!"
    else
        print_warning "M·ªôt s·ªë th√†nh ph·∫ßn ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t ƒë·∫ßy ƒë·ªß"
    fi
}

# Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n ti·∫øp theo
show_next_steps() {
    echo
    print_status "üéâ Kh·ªüi t·∫°o h·ªá th·ªëng ho√†n t·∫•t!"
    echo
    print_status "C√°c b∆∞·ªõc ti·∫øp theo:"
    echo "1. Ch·ªânh s·ª≠a file .env v·ªõi th√¥ng tin th·ª±c t·∫ø"
    echo "2. C·∫•u h√¨nh SSL: ./scripts/setup-ssl.sh yourdomain.com email@domain.com"
    echo "3. Deploy h·ªá th·ªëng: ./scripts/deploy-production.sh"
    echo "4. Ki·ªÉm tra monitoring: ./scripts/monitor.sh"
    echo
    print_status "L·ªánh h·ªØu √≠ch:"
    echo "‚Ä¢ Xem logs: docker-compose logs -f"
    echo "‚Ä¢ Ki·ªÉm tra status: docker-compose ps"
    echo "‚Ä¢ Backup: ./scripts/backup.sh backup"
    echo "‚Ä¢ Restart: docker-compose restart"
    echo
    print_warning "L∆∞u √Ω: ƒê·∫£m b·∫£o thay ƒë·ªïi t·∫•t c·∫£ passwords m·∫∑c ƒë·ªãnh trong file .env"
}

# H√†m ch√≠nh
main() {
    echo "üöÄ Kh·ªüi t·∫°o H·ªá th·ªëng Auto Login"
    echo "=================================="
    echo

    # Ki·ªÉm tra quy·ªÅn root
    check_root

    # C√†i ƒë·∫∑t c√°c th√†nh ph·∫ßn
    install_docker
    install_docker_compose
    install_tools

    # Thi·∫øt l·∫≠p h·ªá th·ªëng
    create_directories
    configure_firewall
    setup_environment
    setup_autostart
    setup_cron_jobs

    # C·∫•p quy·ªÅn cho scripts
    chmod +x scripts/*.sh

    # Ki·ªÉm tra h·ªá th·ªëng
    system_check

    # Hi·ªÉn th·ªã h∆∞·ªõng d·∫´n
    show_next_steps
}

# Ch·∫°y h√†m ch√≠nh
main