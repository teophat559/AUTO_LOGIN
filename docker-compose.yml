version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auto-login-postgres
    environment:
      POSTGRES_DB: auto_login_db
      POSTGRES_USER: auto_login_user
      POSTGRES_PASSWORD: auto_login_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend-node/database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    ports:
      - "5432:5432"
    networks:
      - auto-login-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auto_login_user -d auto_login_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: auto-login-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - auto-login-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend-node
      dockerfile: Dockerfile
    container_name: auto-login-backend
    environment:
      NODE_ENV: production
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: auto_login_db
      DB_USER: auto_login_user
      DB_PASSWORD: auto_login_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your_super_secret_jwt_key_change_this_in_production
      JWT_EXPIRES_IN: 24h
      CHROME_PATH: /usr/bin/google-chrome
      LOG_LEVEL: info
      RATE_LIMIT_WINDOW: 60000
      RATE_LIMIT_MAX_REQUESTS: 100
    volumes:
      - ./backend-node/logs:/app/logs
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - /dev/shm:/dev/shm
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auto-login-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend Dashboard
  frontend:
    build:
      context: ./dashboard
      dockerfile: Dockerfile
    container_name: auto-login-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_WS_URL: ws://localhost:3001
      REACT_APP_VERSION: 1.0.0
    ports:
      - "3000:80"
    depends_on:
      - backend
    networks:
      - auto-login-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: auto-login-nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    ports:
      - "80:80"
      - "443:443"
    depends_on:
      - frontend
      - backend
    networks:
      - auto-login-network
    restart: unless-stopped

  # PM2 Process Manager (Alternative to Docker restart)
  pm2:
    image: node:18-alpine
    container_name: auto-login-pm2
    working_dir: /app
    command: >
      sh -c "npm install -g pm2 &&
             pm2 start ecosystem.config.js &&
             pm2 logs"
    volumes:
      - ./backend-node:/app
    environment:
      NODE_ENV: production
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: auto_login_db
      DB_USER: auto_login_user
      DB_PASSWORD: auto_login_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - auto-login-network
    restart: unless-stopped
    profiles:
      - pm2

  # Monitoring with Prometheus and Grafana
  prometheus:
    image: prom/prometheus:latest
    container_name: auto-login-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - auto-login-network
    restart: unless-stopped
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: auto-login-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3002:3000"
    depends_on:
      - prometheus
    networks:
      - auto-login-network
    restart: unless-stopped
    profiles:
      - monitoring

  # Backup Service
  backup:
    image: postgres:15-alpine
    container_name: auto-login-backup
    volumes:
      - ./backups:/backups
      - postgres_data:/var/lib/postgresql/data
    environment:
      POSTGRES_DB: auto_login_db
      POSTGRES_USER: auto_login_user
      POSTGRES_PASSWORD: auto_login_password
    command: >
      sh -c "
        while true; do
          pg_dump -h postgres -U auto_login_user -d auto_login_db > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql
          find /backups -name 'backup_*.sql' -mtime +7 -delete
          sleep 86400
        done
      "
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auto-login-network
    restart: unless-stopped
    profiles:
      - backup

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  auto-login-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16